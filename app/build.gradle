plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
}

jacoco {
    toolVersion = "0.8.4"
}


//To include Robolectric tests (leverage simulated android framework) in the Jacoco report,
//search all tasks of Test type and enable it.
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    def coverageSourceDirs = [
            "src/main/java",
            "src/main/kotlin"
    ]
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]
    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/app_classes/debug",
            excludes: fileFilter
    )
    def kotlinClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )
    classDirectories.from = files([javaClasses], [kotlinClasses])
    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*.ec"
    ])
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

android {
    compileSdkVersion AndroidSdk.compileSdk
    buildToolsVersion AndroidSdk.buildTools

    defaultConfig {
        applicationId AndroidClient.appId
        minSdkVersion AndroidSdk.minSdk
        targetSdkVersion AndroidSdk.targetSdk
        versionCode AndroidClient.versionCode
        versionName AndroidClient.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    packagingOptions {
        exclude 'META-INF/*'
    }
}

dependencies {

    //core
    implementation Libraries.kotlinStd
    implementation Libraries.androidCore
    implementation Libraries.fragmentKTX
    implementation Libraries.appCompat
    implementation Libraries.materialDesign
    implementation Libraries.constraintLayout

    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //hilt for DI
    implementation Libraries.hilt
    kapt Libraries.hiltCompiler

    //retrofit
    implementation Libraries.retrofit
    implementation Libraries.moshiConverter
    implementation Libraries.okHTTPLogger

    //shimmer
    implementation Libraries.shimmer

    //coroutines
    implementation Libraries.coroutinesAndroid

    //Timber
    implementation Libraries.timber

    //Coil
    implementation Libraries.coil

    testImplementation TestLibraries.testCore
    testImplementation TestLibraries.archCore
    testImplementation TestLibraries.junit
    testImplementation TestLibraries.androidX
    testImplementation TestLibraries.truth
    testImplementation TestLibraries.coroutines
    testImplementation TestLibraries.mockk
    testImplementation TestLibraries.testRunner
    testImplementation TestLibraries.robolectric


    androidTestImplementation TestLibraries.espresso
    androidTestImplementation TestLibraries.espressoIdlingResource
    androidTestImplementation TestLibraries.espressoContrib
    androidTestImplementation TestLibraries.archCore
    androidTestImplementation TestLibraries.junit
    androidTestImplementation TestLibraries.androidX
    androidTestImplementation TestLibraries.truth
    androidTestImplementation TestLibraries.coroutines
    androidTestImplementation TestLibraries.testRunner
    androidTestImplementation TestLibraries.hilt
    kaptAndroidTest TestLibraries.hiltKapt

    debugImplementation TestLibraries.fragment
}
apply from: "../ktlint.gradle"